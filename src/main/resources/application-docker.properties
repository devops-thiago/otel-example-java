# Docker-specific Application Configuration
spring.application.name=otel-crud-api
server.port=8080
server.servlet.context-path=/

# Database Configuration (H2 In-Memory Database)
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false

# Database Initialization
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

# OpenTelemetry Configuration for Docker
otel.service.name=otel-crud-api
otel.service.version=1.0.0
otel.traces.exporter=otlp
otel.metrics.exporter=otlp

# OpenTelemetry Endpoint Configuration (uses container networking)
otel.exporter.otlp.endpoint=http://alloy:4320
otel.exporter.otlp.protocol=grpc
otel.exporter.otlp.timeout=10000
otel.exporter.otlp.compression=gzip

# Logging Configuration for Docker
logging.level.com.example.otelcrudapi=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.io.opentelemetry=INFO

# Output logs to stdout for container log aggregation
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n

# Log file configuration
logging.file.name=/app/logs/application.log
logging.file.max-size=10MB
logging.file.max-history=10
logging.file.total-size-cap=100MB

# Actuator Configuration for Docker
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true
management.metrics.export.prometheus.enabled=true

# Jackson Configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.default-property-inclusion=non_null
spring.jackson.deserialization.fail-on-unknown-properties=false

# Error Handling Configuration
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=never
server.error.include-exception=false

# Virtual Threads Configuration (Java 21+)
spring.threads.virtual.enabled=true
server.tomcat.threads.max=200
server.tomcat.accept-count=100
server.tomcat.max-connections=8192

# Container-specific optimizations
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s
server.tomcat.connection-timeout=20s
server.tomcat.keep-alive-timeout=15s